# Create a doubly linked list and add certain nodes. 
class Node: 

	 
	def _init_(self, data): 
		self.data = data 
		self.next = None
		self.prev = None


class DoublyLinkedList: 

	
	def _init_(self): 
		self.head = None

	def push(self, new_data): 

		
		new_node = Node(new_data) 

		
		new_node.next = self.head 

		
		if self.head is not None: 
			self.head.prev = new_node 

		
		self.head = new_node 

	
	def insertAfter(self, prev_node, new_data): 

		
		if prev_node is None: 
			print ("the given previous node cannot be NULL")
			return

		
		new_node = Node(new_data) 

		 
		new_node.next = prev_node.next

		
		prev_node.next = new_node 

		
		new_node.prev = prev_node 

		
		if new_node.next is not None: 
			new_node.next.prev = new_node 

	
	def append(self, new_data): 

		
		new_node = Node(new_data) 

		
		new_node.next = None

		
		if self.head is None: 
			new_node.prev = None
			self.head = new_node 
			return

		
		last = self.head 
		while(last.next is not None): 
			last = last.next

		last.next = new_node 

		
		new_node.prev = last 

		return

	
	def printList(self, node): 

		print ("\nTraversal in forward direction")
		while(node is not None): 
			print (" % d" %(node.data)), 
			last = node 
			node = node.next

		print("\nTraversal in reverse direction")
		while(last is not None): 
			print (" % d" %(last.data)), 
			last = last.prev 



llist = DoublyLinkedList() 


llist.append(12) 


llist.push(18) 


llist.push(19) 


llist.append(21) 


llist.insertAfter(llist.head.next, 21) 

print ("Created DLL is: "), 
llist.printList(llist.head)



# Insert a node at the end of this doubly linked list.  
class Node:    
    def _init_(self,data):    
        self.data = data;    
        self.previous = None;    
        self.next = None;    
            
class InsertEnd:    
    
    def _init_(self):    
        self.head = None;    
        self.tail = None;    
            
     
    def addAtEnd(self, data):    
         
        newNode = Node(data);    
            
           
        if(self.head == None):    
              
            self.head = self.tail = newNode;    
              
            self.head.previous = None;    
                
            self.tail.next = None;    
        
        else:    
              
            self.tail.next = newNode;    
            
            newNode.previous = self.tail;    
              
            self.tail = newNode;    
              
            self.tail.next = None;    
                
     
    def display(self):    
           
        current = self.head;    
        if(self.head == None):    
            print("List is empty");    
            return;    
        print("Adding a node to the end of the list: ");    
        while(current != None):    
            #Prints each node by incrementing pointer.    
            print(current.data),    
            current = current.next;    
                
        print();    
            
dList = InsertEnd();    
     
   
dList.addAtEnd(21);    
dList.display();    
   
dList.addAtEnd(19);    
dList.display();    
 
dList.addAtEnd(87);    
dList.display();    
 
dList.addAtEnd(95);    
dList.display();    
 
dList.addAtEnd(12);    
dList.display();




# Insert a node at any position in the doubly linked list   
  
class Node:    
    def _init_(self,data):    
        self.data = data;    
        self.previous = None;    
        self.next = None;    
            
class InsertMid:    
    
    def _init_(self):    
        self.head = None;    
        self.tail = None;    
        self.size = 0;    
            
       
    def addNode(self, data):    
           
        newNode = Node(data);    
            
          
        if(self.head == None):    
               
            self.head = self.tail = newNode;    
             
            self.head.previous = None;    
               
            self.tail.next = None;    
        else:    
              
            self.tail.next = newNode;    
            
            newNode.previous = self.tail;    
               
            self.tail = newNode;    
                
            self.tail.next = None;    
          
        self.size = self.size + 1;    
            
  
    def addInMid(self, data):    
            
        newNode = Node(data);    
            
           
        if(self.head == None):    
               
            self.head = self.tail = newNode;    
               
            self.head.previous = None;    
              
            self.tail.next = None;    
        else:    
             
            current = self.head;    
                
            
            mid = (self.size//2) if(self.size % 2 == 0)  else ((self.size+1)//2);    
                
            
            for i in range(1, mid):    
                current = current.next;    
                    
            
            temp = current.next;    
            temp.previous = current;    
                
            
            current.next = newNode;    
            newNode.previous = current;    
            newNode.next = temp;    
            temp.previous = newNode;    
        self.size = self.size + 1;    
                
     
    def display(self):    
          
        current = self.head;    
        if(self.head == None):    
            print("List is empty");    
            return;    
        while(current != None):    
                
            print(current.data),    
            current = current.next;    
                
        print();    
            
dList = InsertMid();    
    
dList.addNode(21);    
dList.addNode(19);    
     
print("Original list: ");    
dList.display();    
     
 
dList.addInMid(87);    
print( "Updated List: ");    
dList.display();    
     
  
dList.addInMid(21);    
print("Updated List: ");    
dList.display();    
     

dList.addInMid(21);    
print("Updated List: ");    
dList.display();